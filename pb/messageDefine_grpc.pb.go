// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: messageDefine.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcServiceClient is the client API for RpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcServiceClient interface {
	RpcCall(ctx context.Context, opts ...grpc.CallOption) (RpcService_RpcCallClient, error)
}

type rpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcServiceClient(cc grpc.ClientConnInterface) RpcServiceClient {
	return &rpcServiceClient{cc}
}

func (c *rpcServiceClient) RpcCall(ctx context.Context, opts ...grpc.CallOption) (RpcService_RpcCallClient, error) {
	stream, err := c.cc.NewStream(ctx, &RpcService_ServiceDesc.Streams[0], "/raftlib.RpcService/rpcCall", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcServiceRpcCallClient{stream}
	return x, nil
}

type RpcService_RpcCallClient interface {
	Send(*ReqInfoBase) error
	Recv() (*RspInfoBase, error)
	grpc.ClientStream
}

type rpcServiceRpcCallClient struct {
	grpc.ClientStream
}

func (x *rpcServiceRpcCallClient) Send(m *ReqInfoBase) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rpcServiceRpcCallClient) Recv() (*RspInfoBase, error) {
	m := new(RspInfoBase)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RpcServiceServer is the server API for RpcService service.
// All implementations must embed UnimplementedRpcServiceServer
// for forward compatibility
type RpcServiceServer interface {
	RpcCall(RpcService_RpcCallServer) error
	mustEmbedUnimplementedRpcServiceServer()
}

// UnimplementedRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRpcServiceServer struct {
}

func (UnimplementedRpcServiceServer) RpcCall(RpcService_RpcCallServer) error {
	return status.Errorf(codes.Unimplemented, "method RpcCall not implemented")
}
func (UnimplementedRpcServiceServer) mustEmbedUnimplementedRpcServiceServer() {}

// UnsafeRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcServiceServer will
// result in compilation errors.
type UnsafeRpcServiceServer interface {
	mustEmbedUnimplementedRpcServiceServer()
}

func RegisterRpcServiceServer(s grpc.ServiceRegistrar, srv RpcServiceServer) {
	s.RegisterService(&RpcService_ServiceDesc, srv)
}

func _RpcService_RpcCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServiceServer).RpcCall(&rpcServiceRpcCallServer{stream})
}

type RpcService_RpcCallServer interface {
	Send(*RspInfoBase) error
	Recv() (*ReqInfoBase, error)
	grpc.ServerStream
}

type rpcServiceRpcCallServer struct {
	grpc.ServerStream
}

func (x *rpcServiceRpcCallServer) Send(m *RspInfoBase) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rpcServiceRpcCallServer) Recv() (*ReqInfoBase, error) {
	m := new(ReqInfoBase)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RpcService_ServiceDesc is the grpc.ServiceDesc for RpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raftlib.RpcService",
	HandlerType: (*RpcServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "rpcCall",
			Handler:       _RpcService_RpcCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "messageDefine.proto",
}
